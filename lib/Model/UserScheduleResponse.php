<?php
/**
 * UserScheduleResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  SwaggerEbayFeedApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed API
 *
 * The Feed API lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.
 *
 * OpenAPI spec version: v1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SwaggerEbayFeedApi\Client\Model;

use \ArrayAccess;
use \SwaggerEbayFeedApi\Client\ObjectSerializer;

/**
 * UserScheduleResponse Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for a paginated result set of available schedules. The response consists of 0 or more sequenced &lt;em&gt; pages&lt;/em&gt; where each page has 0 or more items.
 * @package  SwaggerEbayFeedApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserScheduleResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserScheduleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scheduleId' => 'string',
        'creationDate' => 'string',
        'feedType' => 'string',
        'lastModifiedDate' => 'string',
        'preferredTriggerDayOfMonth' => 'int',
        'preferredTriggerDayOfWeek' => 'string',
        'preferredTriggerHour' => 'string',
        'scheduleEndDate' => 'string',
        'scheduleName' => 'string',
        'scheduleStartDate' => 'string',
        'scheduleTemplateId' => 'string',
        'schemaVersion' => 'string',
        'status' => 'string',
        'statusReason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scheduleId' => null,
        'creationDate' => null,
        'feedType' => null,
        'lastModifiedDate' => null,
        'preferredTriggerDayOfMonth' => null,
        'preferredTriggerDayOfWeek' => null,
        'preferredTriggerHour' => null,
        'scheduleEndDate' => null,
        'scheduleName' => null,
        'scheduleStartDate' => null,
        'scheduleTemplateId' => null,
        'schemaVersion' => null,
        'status' => null,
        'statusReason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduleId' => 'scheduleId',
        'creationDate' => 'creationDate',
        'feedType' => 'feedType',
        'lastModifiedDate' => 'lastModifiedDate',
        'preferredTriggerDayOfMonth' => 'preferredTriggerDayOfMonth',
        'preferredTriggerDayOfWeek' => 'preferredTriggerDayOfWeek',
        'preferredTriggerHour' => 'preferredTriggerHour',
        'scheduleEndDate' => 'scheduleEndDate',
        'scheduleName' => 'scheduleName',
        'scheduleStartDate' => 'scheduleStartDate',
        'scheduleTemplateId' => 'scheduleTemplateId',
        'schemaVersion' => 'schemaVersion',
        'status' => 'status',
        'statusReason' => 'statusReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduleId' => 'setScheduleId',
        'creationDate' => 'setCreationDate',
        'feedType' => 'setFeedType',
        'lastModifiedDate' => 'setLastModifiedDate',
        'preferredTriggerDayOfMonth' => 'setPreferredTriggerDayOfMonth',
        'preferredTriggerDayOfWeek' => 'setPreferredTriggerDayOfWeek',
        'preferredTriggerHour' => 'setPreferredTriggerHour',
        'scheduleEndDate' => 'setScheduleEndDate',
        'scheduleName' => 'setScheduleName',
        'scheduleStartDate' => 'setScheduleStartDate',
        'scheduleTemplateId' => 'setScheduleTemplateId',
        'schemaVersion' => 'setSchemaVersion',
        'status' => 'setStatus',
        'statusReason' => 'setStatusReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduleId' => 'getScheduleId',
        'creationDate' => 'getCreationDate',
        'feedType' => 'getFeedType',
        'lastModifiedDate' => 'getLastModifiedDate',
        'preferredTriggerDayOfMonth' => 'getPreferredTriggerDayOfMonth',
        'preferredTriggerDayOfWeek' => 'getPreferredTriggerDayOfWeek',
        'preferredTriggerHour' => 'getPreferredTriggerHour',
        'scheduleEndDate' => 'getScheduleEndDate',
        'scheduleName' => 'getScheduleName',
        'scheduleStartDate' => 'getScheduleStartDate',
        'scheduleTemplateId' => 'getScheduleTemplateId',
        'schemaVersion' => 'getSchemaVersion',
        'status' => 'getStatus',
        'statusReason' => 'getStatusReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scheduleId'] = isset($data['scheduleId']) ? $data['scheduleId'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['feedType'] = isset($data['feedType']) ? $data['feedType'] : null;
        $this->container['lastModifiedDate'] = isset($data['lastModifiedDate']) ? $data['lastModifiedDate'] : null;
        $this->container['preferredTriggerDayOfMonth'] = isset($data['preferredTriggerDayOfMonth']) ? $data['preferredTriggerDayOfMonth'] : null;
        $this->container['preferredTriggerDayOfWeek'] = isset($data['preferredTriggerDayOfWeek']) ? $data['preferredTriggerDayOfWeek'] : null;
        $this->container['preferredTriggerHour'] = isset($data['preferredTriggerHour']) ? $data['preferredTriggerHour'] : null;
        $this->container['scheduleEndDate'] = isset($data['scheduleEndDate']) ? $data['scheduleEndDate'] : null;
        $this->container['scheduleName'] = isset($data['scheduleName']) ? $data['scheduleName'] : null;
        $this->container['scheduleStartDate'] = isset($data['scheduleStartDate']) ? $data['scheduleStartDate'] : null;
        $this->container['scheduleTemplateId'] = isset($data['scheduleTemplateId']) ? $data['scheduleTemplateId'] : null;
        $this->container['schemaVersion'] = isset($data['schemaVersion']) ? $data['schemaVersion'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusReason'] = isset($data['statusReason']) ? $data['statusReason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduleId
     *
     * @return string
     */
    public function getScheduleId()
    {
        return $this->container['scheduleId'];
    }

    /**
     * Sets scheduleId
     *
     * @param string $scheduleId The ID of the schedule. This ID is generated when the schedule was created by the createSchedule method.
     *
     * @return $this
     */
    public function setScheduleId($scheduleId)
    {
        $this->container['scheduleId'] = $scheduleId;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param string $creationDate The creation date of the schedule in hours based on the 24-hour Coordinated Universal Time (UTC) clock.
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets feedType
     *
     * @return string
     */
    public function getFeedType()
    {
        return $this->container['feedType'];
    }

    /**
     * Sets feedType
     *
     * @param string $feedType The feedType associated with the schedule.
     *
     * @return $this
     */
    public function setFeedType($feedType)
    {
        $this->container['feedType'] = $feedType;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return string
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param string $lastModifiedDate The date the schedule was last modified.
     *
     * @return $this
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets preferredTriggerDayOfMonth
     *
     * @return int
     */
    public function getPreferredTriggerDayOfMonth()
    {
        return $this->container['preferredTriggerDayOfMonth'];
    }

    /**
     * Sets preferredTriggerDayOfMonth
     *
     * @param int $preferredTriggerDayOfMonth The preferred day of the month to trigger the schedule. This field can be used with preferredTriggerHour for monthly schedules. The last day of the month is used for numbers larger than the number of days in the month.
     *
     * @return $this
     */
    public function setPreferredTriggerDayOfMonth($preferredTriggerDayOfMonth)
    {
        $this->container['preferredTriggerDayOfMonth'] = $preferredTriggerDayOfMonth;

        return $this;
    }

    /**
     * Gets preferredTriggerDayOfWeek
     *
     * @return string
     */
    public function getPreferredTriggerDayOfWeek()
    {
        return $this->container['preferredTriggerDayOfWeek'];
    }

    /**
     * Sets preferredTriggerDayOfWeek
     *
     * @param string $preferredTriggerDayOfWeek The preferred day of the week to trigger the schedule. This field can be used with preferredTriggerHour for weekly schedules. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPreferredTriggerDayOfWeek($preferredTriggerDayOfWeek)
    {
        $this->container['preferredTriggerDayOfWeek'] = $preferredTriggerDayOfWeek;

        return $this;
    }

    /**
     * Gets preferredTriggerHour
     *
     * @return string
     */
    public function getPreferredTriggerHour()
    {
        return $this->container['preferredTriggerHour'];
    }

    /**
     * Sets preferredTriggerHour
     *
     * @param string $preferredTriggerHour The preferred two-digit hour of the day to trigger the schedule. Format: UTC hhZ For example, the following represents 11:00 am UTC: 11Z
     *
     * @return $this
     */
    public function setPreferredTriggerHour($preferredTriggerHour)
    {
        $this->container['preferredTriggerHour'] = $preferredTriggerHour;

        return $this;
    }

    /**
     * Gets scheduleEndDate
     *
     * @return string
     */
    public function getScheduleEndDate()
    {
        return $this->container['scheduleEndDate'];
    }

    /**
     * Sets scheduleEndDate
     *
     * @param string $scheduleEndDate The timestamp on which the report generation (subscription) ends. After this date, the schedule status becomes INACTIVE.
     *
     * @return $this
     */
    public function setScheduleEndDate($scheduleEndDate)
    {
        $this->container['scheduleEndDate'] = $scheduleEndDate;

        return $this;
    }

    /**
     * Gets scheduleName
     *
     * @return string
     */
    public function getScheduleName()
    {
        return $this->container['scheduleName'];
    }

    /**
     * Sets scheduleName
     *
     * @param string $scheduleName The schedule name assigned by the user for the created schedule. Users assign this name for their reference.
     *
     * @return $this
     */
    public function setScheduleName($scheduleName)
    {
        $this->container['scheduleName'] = $scheduleName;

        return $this;
    }

    /**
     * Gets scheduleStartDate
     *
     * @return string
     */
    public function getScheduleStartDate()
    {
        return $this->container['scheduleStartDate'];
    }

    /**
     * Sets scheduleStartDate
     *
     * @param string $scheduleStartDate The timestamp that indicates the start of the report generation.
     *
     * @return $this
     */
    public function setScheduleStartDate($scheduleStartDate)
    {
        $this->container['scheduleStartDate'] = $scheduleStartDate;

        return $this;
    }

    /**
     * Gets scheduleTemplateId
     *
     * @return string
     */
    public function getScheduleTemplateId()
    {
        return $this->container['scheduleTemplateId'];
    }

    /**
     * Sets scheduleTemplateId
     *
     * @param string $scheduleTemplateId The ID of the template used to create this schedule.
     *
     * @return $this
     */
    public function setScheduleTemplateId($scheduleTemplateId)
    {
        $this->container['scheduleTemplateId'] = $scheduleTemplateId;

        return $this;
    }

    /**
     * Gets schemaVersion
     *
     * @return string
     */
    public function getSchemaVersion()
    {
        return $this->container['schemaVersion'];
    }

    /**
     * Sets schemaVersion
     *
     * @param string $schemaVersion The schema version of the feedType for the schedule.
     *
     * @return $this
     */
    public function setSchemaVersion($schemaVersion)
    {
        $this->container['schemaVersion'] = $schemaVersion;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The enumeration value that indicates the state of the schedule. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusReason
     *
     * @return string
     */
    public function getStatusReason()
    {
        return $this->container['statusReason'];
    }

    /**
     * Sets statusReason
     *
     * @param string $statusReason The reason the schedule is inactive. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusReasonEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setStatusReason($statusReason)
    {
        $this->container['statusReason'] = $statusReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


