<?php
/**
 * OrderTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  SwaggerEbayFeedApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed API
 *
 * The Feed API lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.
 *
 * OpenAPI spec version: v1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SwaggerEbayFeedApi\Client\Model;

use \ArrayAccess;
use \SwaggerEbayFeedApi\Client\ObjectSerializer;

/**
 * OrderTask Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the &lt;b&gt; getOrderTask&lt;/b&gt; response.
 * @package  SwaggerEbayFeedApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'completionDate' => 'string',
        'creationDate' => 'string',
        'detailHref' => 'string',
        'feedType' => 'string',
        'filterCriteria' => '\SwaggerEbayFeedApi\Client\Model\OrderFilterCriteria',
        'schemaVersion' => 'string',
        'status' => 'string',
        'taskId' => 'string',
        'uploadSummary' => '\SwaggerEbayFeedApi\Client\Model\UploadSummary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'completionDate' => null,
        'creationDate' => null,
        'detailHref' => null,
        'feedType' => null,
        'filterCriteria' => null,
        'schemaVersion' => null,
        'status' => null,
        'taskId' => null,
        'uploadSummary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'completionDate' => 'completionDate',
        'creationDate' => 'creationDate',
        'detailHref' => 'detailHref',
        'feedType' => 'feedType',
        'filterCriteria' => 'filterCriteria',
        'schemaVersion' => 'schemaVersion',
        'status' => 'status',
        'taskId' => 'taskId',
        'uploadSummary' => 'uploadSummary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'completionDate' => 'setCompletionDate',
        'creationDate' => 'setCreationDate',
        'detailHref' => 'setDetailHref',
        'feedType' => 'setFeedType',
        'filterCriteria' => 'setFilterCriteria',
        'schemaVersion' => 'setSchemaVersion',
        'status' => 'setStatus',
        'taskId' => 'setTaskId',
        'uploadSummary' => 'setUploadSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'completionDate' => 'getCompletionDate',
        'creationDate' => 'getCreationDate',
        'detailHref' => 'getDetailHref',
        'feedType' => 'getFeedType',
        'filterCriteria' => 'getFilterCriteria',
        'schemaVersion' => 'getSchemaVersion',
        'status' => 'getStatus',
        'taskId' => 'getTaskId',
        'uploadSummary' => 'getUploadSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['completionDate'] = isset($data['completionDate']) ? $data['completionDate'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['detailHref'] = isset($data['detailHref']) ? $data['detailHref'] : null;
        $this->container['feedType'] = isset($data['feedType']) ? $data['feedType'] : null;
        $this->container['filterCriteria'] = isset($data['filterCriteria']) ? $data['filterCriteria'] : null;
        $this->container['schemaVersion'] = isset($data['schemaVersion']) ? $data['schemaVersion'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['taskId'] = isset($data['taskId']) ? $data['taskId'] : null;
        $this->container['uploadSummary'] = isset($data['uploadSummary']) ? $data['uploadSummary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets completionDate
     *
     * @return string
     */
    public function getCompletionDate()
    {
        return $this->container['completionDate'];
    }

    /**
     * Sets completionDate
     *
     * @param string $completionDate The timestamp when the task went into the COMPLETED or COMPLETED_WITH_ERROR state. This state means that eBay has compiled the report for the seller based on the seller&rsquo;s filter criteria, and the seller can run a getResultFile call to download the report.
     *
     * @return $this
     */
    public function setCompletionDate($completionDate)
    {
        $this->container['completionDate'] = $completionDate;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param string $creationDate The date the task was created.
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets detailHref
     *
     * @return string
     */
    public function getDetailHref()
    {
        return $this->container['detailHref'];
    }

    /**
     * Sets detailHref
     *
     * @param string $detailHref The path to the call URI used to retrieve the task.
     *
     * @return $this
     */
    public function setDetailHref($detailHref)
    {
        $this->container['detailHref'] = $detailHref;

        return $this;
    }

    /**
     * Gets feedType
     *
     * @return string
     */
    public function getFeedType()
    {
        return $this->container['feedType'];
    }

    /**
     * Sets feedType
     *
     * @param string $feedType The feed type associated with the task.
     *
     * @return $this
     */
    public function setFeedType($feedType)
    {
        $this->container['feedType'] = $feedType;

        return $this;
    }

    /**
     * Gets filterCriteria
     *
     * @return \SwaggerEbayFeedApi\Client\Model\OrderFilterCriteria
     */
    public function getFilterCriteria()
    {
        return $this->container['filterCriteria'];
    }

    /**
     * Sets filterCriteria
     *
     * @param \SwaggerEbayFeedApi\Client\Model\OrderFilterCriteria $filterCriteria filterCriteria
     *
     * @return $this
     */
    public function setFilterCriteria($filterCriteria)
    {
        $this->container['filterCriteria'] = $filterCriteria;

        return $this;
    }

    /**
     * Gets schemaVersion
     *
     * @return string
     */
    public function getSchemaVersion()
    {
        return $this->container['schemaVersion'];
    }

    /**
     * Sets schemaVersion
     *
     * @param string $schemaVersion The schema version number associated with the create task.
     *
     * @return $this
     */
    public function setSchemaVersion($schemaVersion)
    {
        $this->container['schemaVersion'] = $schemaVersion;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The enumeration value that indicates the state of the task that was submitted in the request. See FeedStatusEnum for information. The values COMPLETED and COMPLETED_WITH_ERROR indicate the Order Report file is ready to download. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets taskId
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['taskId'];
    }

    /**
     * Sets taskId
     *
     * @param string $taskId The ID of the task that was submitted in the request.
     *
     * @return $this
     */
    public function setTaskId($taskId)
    {
        $this->container['taskId'] = $taskId;

        return $this;
    }

    /**
     * Gets uploadSummary
     *
     * @return \SwaggerEbayFeedApi\Client\Model\UploadSummary
     */
    public function getUploadSummary()
    {
        return $this->container['uploadSummary'];
    }

    /**
     * Sets uploadSummary
     *
     * @param \SwaggerEbayFeedApi\Client\Model\UploadSummary $uploadSummary uploadSummary
     *
     * @return $this
     */
    public function setUploadSummary($uploadSummary)
    {
        $this->container['uploadSummary'] = $uploadSummary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


