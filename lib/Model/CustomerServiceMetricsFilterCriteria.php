<?php
/**
 * CustomerServiceMetricsFilterCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  SwaggerEbayFeedApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Feed API
 *
 * The Feed API lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.
 *
 * OpenAPI spec version: v1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SwaggerEbayFeedApi\Client\Model;

use \ArrayAccess;
use \SwaggerEbayFeedApi\Client\ObjectSerializer;

/**
 * CustomerServiceMetricsFilterCriteria Class Doc Comment
 *
 * @category Class
 * @description A complex data type that filters data for report creation. See &lt;strong&gt;CustomerServiceMetricsFilterCriteria&lt;/strong&gt; for fields and descriptions.
 * @package  SwaggerEbayFeedApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerServiceMetricsFilterCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerServiceMetricsFilterCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customerServiceMetricType' => 'string',
        'evaluationMarketplaceId' => 'string',
        'listingCategories' => 'string[]',
        'shippingRegions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customerServiceMetricType' => null,
        'evaluationMarketplaceId' => null,
        'listingCategories' => null,
        'shippingRegions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customerServiceMetricType' => 'customerServiceMetricType',
        'evaluationMarketplaceId' => 'evaluationMarketplaceId',
        'listingCategories' => 'listingCategories',
        'shippingRegions' => 'shippingRegions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customerServiceMetricType' => 'setCustomerServiceMetricType',
        'evaluationMarketplaceId' => 'setEvaluationMarketplaceId',
        'listingCategories' => 'setListingCategories',
        'shippingRegions' => 'setShippingRegions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customerServiceMetricType' => 'getCustomerServiceMetricType',
        'evaluationMarketplaceId' => 'getEvaluationMarketplaceId',
        'listingCategories' => 'getListingCategories',
        'shippingRegions' => 'getShippingRegions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerServiceMetricType'] = isset($data['customerServiceMetricType']) ? $data['customerServiceMetricType'] : null;
        $this->container['evaluationMarketplaceId'] = isset($data['evaluationMarketplaceId']) ? $data['evaluationMarketplaceId'] : null;
        $this->container['listingCategories'] = isset($data['listingCategories']) ? $data['listingCategories'] : null;
        $this->container['shippingRegions'] = isset($data['shippingRegions']) ? $data['shippingRegions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customerServiceMetricType
     *
     * @return string
     */
    public function getCustomerServiceMetricType()
    {
        return $this->container['customerServiceMetricType'];
    }

    /**
     * Sets customerServiceMetricType
     *
     * @param string $customerServiceMetricType An enumeration value that specifies the customer service metric that eBay tracks to measure seller performance. See CustomerServiceMetricTypeEnum for values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:CustomerServiceMetricTypeEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setCustomerServiceMetricType($customerServiceMetricType)
    {
        $this->container['customerServiceMetricType'] = $customerServiceMetricType;

        return $this;
    }

    /**
     * Gets evaluationMarketplaceId
     *
     * @return string
     */
    public function getEvaluationMarketplaceId()
    {
        return $this->container['evaluationMarketplaceId'];
    }

    /**
     * Sets evaluationMarketplaceId
     *
     * @param string $evaluationMarketplaceId An enumeration value that specifies the eBay marketplace where the evaluation occurs. See MarketplaceIdEnum for values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/bas:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setEvaluationMarketplaceId($evaluationMarketplaceId)
    {
        $this->container['evaluationMarketplaceId'] = $evaluationMarketplaceId;

        return $this;
    }

    /**
     * Gets listingCategories
     *
     * @return string[]
     */
    public function getListingCategories()
    {
        return $this->container['listingCategories'];
    }

    /**
     * Sets listingCategories
     *
     * @param string[] $listingCategories A list of listing category IDs on which the service metric is measured. A seller can use one or more L1 (top-level) eBay categories to get metrics specific to those L1 categories. The Category IDs for each L1 category are required. Category ID values for L1 categories can be retrieved using the Taxonomy API. Note: Pass this attribute to narrow down your filter results for the ITEM_NOT_AS_DESCRIBED customerServiceMetricType. Supported categories include: primary(L1) category Id
     *
     * @return $this
     */
    public function setListingCategories($listingCategories)
    {
        $this->container['listingCategories'] = $listingCategories;

        return $this;
    }

    /**
     * Gets shippingRegions
     *
     * @return string[]
     */
    public function getShippingRegions()
    {
        return $this->container['shippingRegions'];
    }

    /**
     * Sets shippingRegions
     *
     * @param string[] $shippingRegions A list of shipping region enumeration values on which the service metric is measured. This comma delimited array allows the seller to customize the report to focus on domestic or international shipping. Note: Pass this attribute to narrow down your filter results for the ITEM_NOT_RECEIVED customerServiceMetricType. Supported categories include: primary(L1) category IdSee ShippingRegionTypeEnum for values
     *
     * @return $this
     */
    public function setShippingRegions($shippingRegions)
    {
        $this->container['shippingRegions'] = $shippingRegions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


